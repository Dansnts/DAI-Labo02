@startuml functional-example

title "Functional example"

participant "client 1" as c1
participant "Server" as s
participant "client 2" as Giovanni

== Join the server ==

note over c1,Giovanni
The socket is instanciated and the connection is
automatically established.
end note

c1->s : Establish connection
c1<-->s : Connection established

c1->s: LOGIN Red
s->c1: OK

Giovanni->s: Establish connection
s<-->Giovanni: Connection established

Giovanni->s: LOGIN Giovanni
s->Giovanni: OK

== List possible combats ==

c1->s: JOIN
s->c1: HOSTS Giovanni 

== JOIN possible combats ==

c1->s: JOIN Giovanni
s->c1: OK

c1->Giovanni: Establish connection
c1<-->Giovanni: Connection established

== HOST possible combats ==

Giovanni->s: HOST
s->Giovanni: OK
s->Giovanni: RECEIVE matchmaking from Red
s->s: Remove Giovanni from Hosts

== POKEDEX ==

c1->s: POKEDEX
s->c1: POKEMON (bulbizzare, herbizzare, florizzare,...)
c1->s: POKEDEX bulbizzare
s->c1: STATS Bulbizzare Grass/Poison (PV: 45, ATT:49,...)

c1->s: POKEDEX ADD
s->c1: what is his name?
c1->s: Sephiroth
s->c1: etc...
s->c1: OK

== CHANGE team composition==
note over c1
Just as in the real game each trainer only
has 6 pokemon max
end note

c1->s: CHANGE
s->c1: YOUR team (bulbizzare, carapuce)
c1->s: CHANGE 1 herbizzare
s->c1: OK

== Quit ==

note over c1,Giovanni
Just as for the connection establishment, no
formal message is sent to the server when
disconnecting.

The socket is closed by the client and the
connection is automatically closed.
end note

c1->c1: Close the connection
c1<-->s: The connection is closed
s->s: Remove Red from users

Giovanni->Giovanni: Close the connection
Giovanni<-->s: The connection si closed
s->s: Remove Giovanni from users

@enduml
